@page "/StudentplanPage/{userId:int}"
@using Core
@using EksamensProjekt.Service
@inject ILogin LoginService
@inject NavigationManager nav
@inject IUser mService

<h3>Elevplan</h3>

@if (student == null)
{
    <p>Bruger ikke fundet.</p>
}
else if (student.Studentplan == null)
{
    <p>Ingen elevplan for @student.Name.</p>
}
else
{
    
    <div class="profile-container">
        <div class="profile-header">
            <img src="@student.ProfilePicture" class="profile-image" />
            <div class="profile-info">
                <h3>@student.Name’s Profil</h3>
                <h4 class="role">@student.Role</h4>
                <h4>@student.DateOfStart.Year</h4>
            </div>
            <td><button class="btn-primary" @onclick="() => DeleteById(student)">Rediger</button></td>
            
            @if (currentUser?.Role == "Admin")
            {
                <td><button class="btn-primary" @onclick="() => DeleteById(student)">Fjern bruger</button></td>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public int userId { get; set; }

    private Student? student;
    private User? currentUser;

    protected override async Task OnInitializedAsync()
    {
        currentUser = await LoginService.GetUserLoggedIn();

        if (currentUser == null ||
            (currentUser.Role != "Admin" && currentUser.Role != "Køkkenchef"))
        {
            nav.NavigateTo("/");
            return;
        }

        student = await mService.GetStudentById(userId);
    }
    
    private async Task DeleteById(User user)
    {
        await mService.DeleteById(user.UserId);
        nav.NavigateTo("/AllStudentsPage");

    }
}