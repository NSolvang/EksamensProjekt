@page "/StudentplanPage/{userId:int}"
@using Core
@using EksamensProjekt.Service
@using EksamensProjekt.Components
@inject ILogin LoginService
@inject NavigationManager nav
@inject IUser mService
@inject ISubgoal mServiceSubgoal
@inject IComment mServiceComment

<h3>Elevplan</h3>

@if (users == null)
{
    <p>Bruger ikke fundet.</p>
}
else if (users.Studentplan == null)
{
    <p>Ingen elevplan for @users.Name.</p>
}
else
{
    <StudentplanHeaderComponent user="users" CurrentUser="currentUser"/>

    <div class="internship-section">
        <div class="internship-period-buttons">
            <button>Praktikperiode 1</button>
            <button>Praktikperiode 2</button>
            <button>Praktikperiode 3</button>
            <button>Afslutning</button>
        </div>
    </div>

    <div class="Student-plan-container">
        @foreach (var goal in goals)
        {
            <button @onclick="() => ToggleTable(goal.GoalId)" class="goal-toggle-btn @(expandedGoalId == goal.GoalId ? "active" : "")">
                @goal.Name
            </button>
            @if (expandedGoalId == goal.GoalId)
            {
                <div class="dropdown-table">
                    <table class="table">
                        <thead>
                        <tr>
                            <th>Opgave</th>
                            <th>Dato</th>
                            <th>Ansvarlig</th>
                            <th>B√∏r Gennemf√∏res i Perioden</th>
                            <th>Gennemf√∏rt Status</th>
                            <th>Kommentar</th>
                            @if (currentUser.Role == "K√∏kkenchef" || currentUser.Role == "Admin" || currentUser.Role == "Kok")
                            {
                                <th>Handling</th>
                            }
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var subgoal in goal.Subgoals)
                        {
                            <tr>
                                <td>@subgoal.Name</td>
                                <td>@subgoal.Date.ToShortDateString()</td>
                                <td>@subgoal.Responsible</td>
                                <td>@subgoal.Deadline</td>
                                <td>
                                    @if (subgoal.Approval)
                                    {
                                        <span class="status-Gennemf√∏rt">Gennemf√∏rt</span>
                                    }
                                    else
                                    {
                                        <select value="@subgoal.Status"
                                                @onchange="(e) => OnStatusChanged(e,userId,goal.GoalId, subgoal)"
                                                class="form-control select-status @GetStatusClass(subgoal.Status)">
                                            <option value="Mangler">Mangler</option>
                                            <option value="Igang">Igang</option>
                                            <option value="Gennemf√∏rt">Gennemf√∏rt</option>
                                        </select>
                                    }
                                </td>
                                <td>
                                    <button class="notes-btn" @onclick="() => OpenCommentModal(subgoal)">
                                        <span class="notes-icon">üìù</span>
                                        <span class="notes-count">@GetCommentCount(subgoal)</span>
                                    </button>
                                </td>
                                @if (currentUser.Role == "K√∏kkenchef" || currentUser.Role == "Admin" || currentUser.Role == "Kok")
                                {
                                    <td>
                                        @if (subgoal.Status == "Gennemf√∏rt" && !subgoal.Approval)
                                        {
                                            <button class="btn btn-success btn-sm" @onclick="() => ApproveSubgoal(userId,goal.GoalId, subgoal)">
                                                Godkend
                                            </button>
                                        }
                                        else if (subgoal.Approval)
                                        {
                                            <span class="badge bg-success">Godkendt</span>
                                        }

                                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteSubgoal(userId,goal.GoalId, subgoal.SubgoalID)">
                                            Slet
                                        </button>
                                    </td>
                                }
                            </tr>

                            @if (expandedSubgoalId == subgoal.SubgoalID)
                            {
                                <tr class="dropdown-table">
                                    <td colspan="7">
                                        <!-- Ekstra detaljer for subgoal -->
                                        <p><strong>Detaljer for opgave:</strong> @subgoal.Name</p>
                                    </td>
                                </tr>
                            }
                        }
                        </tbody>
                    </table>
                    @if (currentUser.Role == "K√∏kkenchef" || currentUser.Role == "Admin" || currentUser.Role == "Kok")
                    {
                        <button class="btn btn-primary" @onclick="() => FindGoalForNewSubgoal(goal.GoalId)">Tilf√∏j</button>
                    }
                </div>
            }

            @if (showNewSubgoalForm && selectedGoalId == goal.GoalId && expandedGoalId == goal.GoalId)
            {
                <div class="new-subgoal-form">
                    <h4>Tilf√∏j ny delopgave</h4>
                    <EditForm Model="@newSubgoal" OnValidSubmit="@CreateNewSubgoal" class="row p-3">
                        <DataAnnotationsValidator/>
                        <ValidationSummary/>

                        <div class="form-group">
                            <label for="subgoalName">Opgave:</label>
                            <InputText id="subgoalName" @bind-Value="newSubgoal.Name" class="form-control"/>
                            <ValidationMessage For="@(() => newSubgoal.Name)"/>
                        </div>
                        <div class="form-group">
                            <label for="subgoalDate">Dato:</label>
                            <InputDate id="subgoalDate" @bind-Value="newSubgoal.Date" class="form-control"/>
                            <ValidationMessage For="@(() => newSubgoal.Date)"/>
                        </div>
                        <div class="form-group">
                            <label for="subgoalResponsible">Ansvarlig:</label>
                            <InputSelect id="subgoalResponsible" @bind-Value="newSubgoal.Responsible" class="form-control">
                                <option value="">-- V√¶lg ansvarlig --</option>
                                @foreach (var person in responsiblePeople)
                                {
                                    <option value="@person">@person</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => newSubgoal.Responsible)" />
                        </div>
                        <div class="form-group">
                            <label for="subgoalDeadline">Deadline:</label>
                            <InputText id="subgoalDeadline" @bind-Value="newSubgoal.Deadline" class="form-control"/>
                            <ValidationMessage For="@(() => newSubgoal.Deadline)"/>
                        </div>
                        <div class="form-group mt-3">
                            <button type="submit" class="btn btn-primary">Gem</button>
                            <button type="button" class="btn btn-secondary ml-2" @onclick="CancelNewSubgoal">Annuller</button>
                        </div>
                    </EditForm>
                    @if (newSubgoalError)
                    {
                        <div class="text-danger">Der opstod en fejl ved oprettelse af delopgaven</div>
                    }
                </div>
            }
        }
    </div>
}

<CommentModal
    IsVisible="showCommentModal"
    Subgoal="selectedSubgoal"
    Comments="currentComments"
    CurrentUser="currentUser"
    OnClose="CloseCommentModal"
    OnSaveComment="SaveComment" />


@code {
    [Parameter] public int userId { get; set; }

    private User? users;
    private User? currentUser;
    private Goal[]? goals;

    private bool newSubgoalError = false;
    private bool showNewSubgoalForm = false;
    private int? selectedGoalId;
    private Subgoal newSubgoal = new Subgoal();
    private int? expandedGoalId;
    private int? expandedSubgoalId;
    private List<string> responsiblePeople = new()
    {
        "Elevansvarlig ",
        "Elevansvarlig / N√¶rmeste leder",
        "Elevkollega/ Elevmentor",
        "N√¶rmeste leder/anden",
        "HR",
        "Uddannelsesansvarlig/HR",
        "AV/Ejendom"
    };

    private bool showCommentModal = false;
    private Subgoal? selectedSubgoal;
    private List<Comment> currentComments = new();

    protected override async Task OnInitializedAsync()
    {
        currentUser = await LoginService.GetUserLoggedIn();

        if (currentUser == null || (currentUser.Role == "Elev" && currentUser.UserId != userId))
        {
            nav.NavigateTo("/");
            return;
        }

        users = await mService.GetUserById(userId);
        goals = users?.Studentplan?.Goal?.ToArray();
    }

    private void ToggleTable(int goalId)
    {
        if (expandedGoalId == goalId)
        {
            expandedGoalId = null;
            if (selectedGoalId == goalId && showNewSubgoalForm)
            {
                showNewSubgoalForm = false;
                selectedGoalId = null;
            }
        }
        else
        {
            expandedGoalId = goalId;
            expandedSubgoalId = null;
        }
    }

    private async Task OpenCommentModal(Subgoal subgoal)
    {
        selectedSubgoal = subgoal;
        showCommentModal = true;

        var goal = goals?.FirstOrDefault(g => g.Subgoals.Any(sg => sg.SubgoalID == subgoal.SubgoalID));
        if (goal != null)
        {
            currentComments = await mServiceComment.GetCommentsBySubgoalId(userId, goal.GoalId, subgoal.SubgoalID) ?? new List<Comment>();
        
            // Her s√¶tter vi selectedGoalId til det tilh√∏rende GoalId
            selectedGoalId = goal.GoalId;
        }
        else
        {
            currentComments = new List<Comment>();
            selectedGoalId = null;
        }
    }


    private void CloseCommentModal()
    {
        showCommentModal = false;
        selectedSubgoal = null;
        currentComments.Clear();
    }

    private async Task SaveComment(Comment comment)
    {
        if (selectedSubgoal == null || !selectedGoalId.HasValue)
            return;  // Exit hvis vi ikke har det n√∏dvendige data

        await mServiceComment.AddComment(userId, selectedGoalId.Value, selectedSubgoal.SubgoalID, comment);

        currentComments = await mServiceComment.GetCommentsBySubgoalId(userId, selectedGoalId.Value, selectedSubgoal.SubgoalID);
        
        StateHasChanged();

    }

    private int GetCommentCount(Subgoal subgoal)
    {
        // Hent kommentarer direkte fra service eller fra currentComments, hvis modal √•ben p√• samme subgoal
        if (selectedSubgoal != null && selectedSubgoal.SubgoalID == subgoal.SubgoalID)
        {
            return currentComments.Count;
        }
        else
        {
            // Hent synkront er ikke muligt, s√• return 0 eller lav async variant hvis n√∏dvendigt
            return 0;
        }
    }

    private void FindGoalForNewSubgoal(int goalId)
    {
        selectedGoalId = goalId;
        showNewSubgoalForm = true;
        newSubgoal = new Subgoal
        {
            Date = DateTime.Today,
            Status = "Mangler"
        };
    }

    private void CancelNewSubgoal()
    {
        showNewSubgoalForm = false;
        selectedGoalId = null;
    }

    private async Task CreateNewSubgoal()
    {
        newSubgoalError = false;

        if (string.IsNullOrEmpty(newSubgoal.Name))
        {
            newSubgoalError = true;
            return;
        }

        try
        {
            if (selectedGoalId.HasValue)
            {
                bool success = await mServiceSubgoal.AddSubgoalToGoal(userId, selectedGoalId.Value, newSubgoal);

                if (success)
                {
                    users = await mService.GetUserById(userId);
                    goals = users?.Studentplan?.Goal?.ToArray();

                    showNewSubgoalForm = false;
                    selectedGoalId = null;
                    newSubgoal = new Subgoal();

                    StateHasChanged();
                }
                else
                {
                    newSubgoalError = true;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fejl ved tilf√∏jelse af delm√•l: {ex.Message}");
            newSubgoalError = true;
        }
    }

    private async Task DeleteSubgoal(int userId, int goalId, int subgoalId)
    {
        bool success = await mServiceSubgoal.DeleteSubgoal(userId, goalId, subgoalId);

        if (success)
        {
            users = await mService.GetUserById(userId);
            goals = users?.Studentplan?.Goal?.ToArray();
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Kunne ikke slette delm√•let");
        }
    }

    private string GetStatusClass(string status) => status switch
    {
        "Mangler" => "status-Mangler",
        "Igang" => "status-Igang",
        "Gennemf√∏rt" => "status-Gennemf√∏rt",
        _ => ""
    };

    private async Task ApproveSubgoal(int userId, int goalId, Subgoal subgoal)
    {
        subgoal.Approval = true;

        bool success = await mServiceSubgoal.UpdateSubgoal(userId, goalId, subgoal.SubgoalID, subgoal);

        if (success)
        {
            users = await mService.GetUserById(userId);
            goals = users?.Studentplan?.Goal?.ToArray();
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Kunne ikke godkende delm√•let");
        }
    }

    private async Task OnStatusChanged(ChangeEventArgs e, int userId, int goalId, Subgoal subgoal)
    {
        subgoal.Status = e.Value?.ToString();

        bool success = await mServiceSubgoal.UpdateSubgoal(userId, goalId, subgoal.SubgoalID, subgoal);

        if (!success)
        {
            Console.WriteLine("Kunne ikke opdatere status p√• delm√•let.");
        }
        else
        {
            users = await mService.GetUserById(userId);
            goals = users?.Studentplan?.Goal?.ToArray();
            StateHasChanged();
        }
    }
}