@page "/StudentplanPage/{userId:int}"
@using Core
@using EksamensProjekt.Service
@using EksamensProjekt.Components
@inject ILogin LoginService
@inject NavigationManager nav
@inject IUser mService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<h3>Elevplan</h3>

@if (users == null)
{
    <p>Bruger ikke fundet.</p>
}
else if (users.Studentplan == null)
{
    <p>Ingen elevplan for @users.Name.</p>
}
else
{
    <StudentplanHeaderComponent user="users" CurrentUser="currentUser" />

    <div class="internship-section">
        <div class="internship-period-buttons">
            <button>Praktikperiode 1</button>
            <button>Praktikperiode 2</button>
            <button>Praktikperiode 3</button>
            <button>Afslutning</button>
        </div>
    </div>

    <div class="Student-plan-container">
        @foreach (var goal in goals)
        {
            <button @onclick="() => ToggleTable(goal.GoalId)" class="goal-toggle-btn @(expandedGoalId == goal.GoalId ? "active" : "")">
                @goal.Name
            </button>
            @if (expandedGoalId == goal.GoalId)
            {
                <div class="dropdown-table">
                    <table class="table">
                        <thead>
                        <tr>
                            <th>Opgave</th>
                            <th>Dato</th>
                            <th>Ansvarlig</th>
                            <th>B√∏r Gennemf√∏res i Perioden</th>
                            <th>Gennemf√∏rt Status</th>
                            <th>Kommentar</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var subgoal in goal.Subgoals)
                        {
                            <tr>
                                <td>@subgoal.Name</td>
                                <td>@subgoal.Date.ToShortDateString()</td>
                                <td>@subgoal.Responsible</td>
                                <td>Inden d. @subgoal.Deadline</td>
                                <td>
                                    <select @bind="subgoal.Status" class="form-control select-status @GetStatusClass(subgoal.Status)">
                                        <option value="Mangler">Mangler</option>
                                        <option value="Igang">Igang</option>
                                        <option value="Gennemf√∏rt">Gennemf√∏rt</option>
                                    </select>
                                </td>
                                <td>
                                    <button class="notes-btn" @onclick="() => OpenCommentModal(subgoal)">
                                        <span class="notes-icon">üìù</span>
                                        <span class="notes-count">@GetCommentCount(subgoal)</span>
                                    </button>
                                </td>
                            </tr>

                            @if (expandedSubgoalId == subgoal.SubgoalID)
                            {
                                <tr class="dropdown-table">
                                    <td colspan="6">
                                        <p><strong>Detaljer for opgave:</strong> @subgoal.Name</p>
                                    </td>
                                </tr>
                            }
                        }
                        </tbody>
                    </table>
                </div>
            }
        }
    </div>
}

<CommentModal
    IsVisible="showCommentModal"
    Subgoal="selectedSubgoal"
    Comments="GetComments(selectedSubgoal)"
    CurrentUser="currentUser"
    OnClose="CloseCommentModal"
    OnSaveComment="SaveComment" />

@code {
    [Parameter] public int userId { get; set; }

    private User? users;
    private User? currentUser;
    private Goal[]? goals;
    private Dictionary<string, List<Comment>> allComments = new();

    private int? expandedGoalId;
    private int? expandedSubgoalId;

    private bool showCommentModal = false;
    private Subgoal? selectedSubgoal;

    protected override async Task OnInitializedAsync()
    {
        currentUser = await LoginService.GetUserLoggedIn();

        if (currentUser == null || (currentUser.Role == "Elev" && currentUser.UserId != userId))
        {
            nav.NavigateTo("/");
            return;
        }

        users = await mService.GetUserById(userId);
        goals = users?.Studentplan?.Goal?.ToArray();

        await LoadCommentsFromLocalStorage();
    }

    private void ToggleTable(int goalId)
    {
        expandedGoalId = (expandedGoalId == goalId) ? null : goalId;
        expandedSubgoalId = null;
    }

    private void OpenCommentModal(Subgoal subgoal)
    {
        selectedSubgoal = subgoal;
        showCommentModal = true;
    }

    private void CloseCommentModal()
    {
        showCommentModal = false;
        selectedSubgoal = null;
    }

    private async Task SaveComment(Comment comment)
    {
        if (selectedSubgoal == null) return;

        var key = GetSubgoalKey(selectedSubgoal);

        if (!allComments.ContainsKey(key))
            allComments[key] = new List<Comment>();

        allComments[key].Add(comment);

        await SaveCommentsToLocalStorage();

        StateHasChanged();
    }

    private string GetSubgoalKey(Subgoal subgoal) => $"user_{userId}_subgoal_{subgoal.SubgoalID}";

    private List<Comment> GetComments(Subgoal? subgoal)
    {
        if (subgoal == null) return new();
        var key = GetSubgoalKey(subgoal);
        return allComments.TryGetValue(key, out var list) ? list : new();
    }

    private int GetCommentCount(Subgoal subgoal) => GetComments(subgoal).Count;

    private async Task LoadCommentsFromLocalStorage()
    {
        try
        {
            var comments = await LocalStorage.GetItemAsync<Dictionary<string, List<Comment>>>("studentplanComments");
            if (comments != null)
            {
                allComments = comments;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading comments: {ex.Message}");
        }
    }

    private async Task SaveCommentsToLocalStorage()
    {
        try
        {
            await LocalStorage.SetItemAsync("studentplanComments", allComments);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving comments: {ex.Message}");
        }
    }

    private string GetStatusClass(string status) => status switch
    {
        "Mangler" => "status-Mangler",
        "Igang" => "status-Igang",
        "Gennemf√∏rt" => "status-Gennemf√∏rt",
        _ => ""
    };
}
