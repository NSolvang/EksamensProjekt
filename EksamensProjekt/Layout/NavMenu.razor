@using Core
@using Blazored.LocalStorage
@using EksamensProjekt.Service
@implements IDisposable

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand me-5" href="">
            <img src="https://koldingvenue.dk/wp-content/uploads/2021/11/HOTELS_logo.png" alt="Hotels Logo">
        </a>

        @if (!isLoading)
        {
            <div class="@NavMenuCssClass nav-scrollable">
                <nav class="nav flex-row justify-content-center">
                    @if (currentUser == null)
                    {
                        <div class="nav-item px-3">
                            <NavLink class="nav-link" href="LoginPage">
                                <span class="bi bi-box-arrow-in-right"></span> Login
                            </NavLink>
                        </div>
                    }

                    @if (currentUser != null)
                    {
                        @if (currentUser.Role == "Admin")
                        {
                            <div class="nav-item px-3">
                                <NavLink class="nav-link" href="AllStudentsPage">
                                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Elever
                                </NavLink>
                            </div>
                            <div class="nav-item px-3">
                                <NavLink class="nav-link" href="Medarbejdere">
                                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Medarbejdere
                                </NavLink>
                            </div>
                            <div class="nav-item px-3">
                                <NavLink class="nav-link" href="CreateUserPage">
                                    <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Opret Elev
                                </NavLink>
                            </div>
                        }
                        else if (currentUser.Role == "Køkkenchef" || currentUser.Role == "Faglært kok")
                        {
                            <div class="nav-item px-3">
                                <NavLink class="nav-link" href="AllStudentsPage">
                                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Elever
                                </NavLink>
                            </div>
                            <div class="nav-item px-3">
                                <NavLink class="nav-link" href="Medarbejdere">
                                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Medarbejdere
                                </NavLink>
                            </div>
                        }
                        else if (currentUser.Role == "Elev")
                        {
                            <div class="nav-item px-3">
                                <NavLink class="nav-link" href="@($"/StudentplanPage/{currentUser?.UserId}")">
                                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Studieplan
                                </NavLink>
                            </div>
                        }
                        <div class="nav-item px-3 d-flex align-items-center">
                            <a role="button" class="nav-link" @onclick="OnLogout">
                                <i class="bi bi-box-arrow-right"></i> Log ud
                            </a>
                        </div>
                    }
                </nav>
            </div>
        }
    </div>
</div>

@code {
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    private User? currentUser;
    private bool isLoading = true;

    [Inject] private ILogin LoginService { get; set; } = default!;
    [Inject] private AuthStateService AuthState { get; set; } = default!;
    [Inject] private NavigationManager navManager { get; set; } = default!;
    [Inject] private ILocalStorageService localStorage { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        // Check login status and update user state
        currentUser = await LoginService.GetUserLoggedIn();

        // Subscribe to auth state changes
        AuthState.AuthStateChanged += OnAuthStateChanged;
        isLoading = false;
    }

    private async void OnAuthStateChanged()
    {
        await UpdateUserState();
    }

    private async Task UpdateUserState()
    {
        currentUser = await LoginService.GetUserLoggedIn();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnLogout()
    {
        await LoginService.LogOut();

        // Navigate to login page
        navManager.NavigateTo("/LoginPage", forceLoad: true);
    }

    public void Dispose()
    {
        AuthState.AuthStateChanged -= OnAuthStateChanged;
    }
}